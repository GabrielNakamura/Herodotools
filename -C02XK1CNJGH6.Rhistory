}
vec.bray
system.time(akodon_max_group <- find.max.nclust(x = vec.bray, threshold = 3, max.nclust = c(5, 6, 7, 8, 9),
nperm = 100, method = "kmeans",
stat = "BIC",
criterion = "diffNgroup",
subset = 100, confidence.level = c(0.7, 0.8, 0.9, 0.95)))
system.time(akodon_max_group <- find.max.nclust(x = vec.bray, threshold = 3, max.nclust = c(5, 6, 7, 8, 9, 10, 15),
nperm = 100, method = "kmeans",
stat = "BIC",
criterion = "diffNgroup",
subset = 100, confidence.level = c(0.7, 0.8, 0.9, 0.95)))
max.nclust <- 15
nperm = 100
if(dim(x) > 1000){
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
} else{
subset <- dim(x)[1]
}
vec.perm <- 1:nperm
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
group_perm <- lapply(max.nclust, function(z){
lapply(vec.perm, function(y){
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = z)
groups <- as.matrix(clust_vec$grp)
group.subset <- as.matrix(groups[group.sample,])
group.subset
})
})
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = 15)
clust_vec
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = 15)
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = 15)
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = 15)
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = 10)
max.nclust
vec.perm
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
group.sample
max.nclust
nperm = 10
vec.perm <- 1:nperm
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
group.sample
group_perm <- lapply(max.nclust, function(z){
lapply(vec.perm, function(y){
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = z)
groups <- as.matrix(clust_vec$grp)
group.subset <- as.matrix(groups[group.sample,])
group.subset
})
})
group.sample
group.subset
group_perm
help(package = "phyloregion")
comm_akodon <- read.table("comm_akodon.txt", header = TRUE)
coord_akodon <- read.table("coord_akodon.txt", header = TRUE)
data(africa)
library(phyloregion)
data(africa)
tree <- africa$phylo
tree
bc <- beta_diss(africa$comm)
bc
class(bc)
bc$beta.sim
(d <- optimal_phyloregion(bc[[1]]))
plot(d$df$k, d$df$ev, ylab = "Explained variances",
xlab = "Number of clusters")
plot(d$df$k, d$df$ev, ylab = "Explained variances",
xlab = "Number of clusters")
lines(d$df$k[order(d$df$k)], d$df$ev[order(d$df$k)], pch = 1)
points(d$optimal$k, d$optimal$ev, pch = 21, bg = "red", cex = 3)
points(d$optimal$k, d$optimal$ev, pch = 21, bg = "red", type = "h")
africa
africa$comm
sparse2dense(africa$comm)
dim(sparse2dense(africa$comm))
comm_dense <- sparse2dense(africa$comm)
matrixP <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(phy))
matrixP <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree))
tree
match(tree$tip.label, colnames(comm_dense))
match( colnames(comm_dense), tree$tip.label)
tree$tip.label[match(colnames(comm_dense), tree$tip.label)]
comm_dense[, tree$tip.label[match(colnames(comm_dense), tree$tip.label)]]
comm_dense <- comm_dense[, tree$tip.label[match(colnames(comm_dense), tree$tip.label)]]
matrixP <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree))
dim(comm_dense)
length(tree$tip.label)
tree_drop <- ape::drop.tip(phy = tree,
tip = tree$tip.label[match(colnames(comm_dense), tree$tip.label)])
tree_trim <- ape::drop.tip(phy = tree, tip = tree_drop$tip.label)
length(tree_trim$tip.label)
matrixP <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree_trim))
matrixP
optimal_matrixP <- phyloregion::optimal_phyloregion(x = sqrt(vegan::vegdist(matrixP$matrix.P)), method = "average")
optimal_matrixP
optimal_matrixP$optimal
max.n.clust <- optimal_matrixP$optimal$k
max.n.clust
pmatch(max.n.clust, c("elbow", "adegenet"))
max.n.clust
max.n.clust.method = "elbow"
match_clust <- pmatch(max.n.clust.method, c("elbow", "adegenet"))
match_clust
vec.bray
pcps_africa <- PCPS::pcps(comm = comm_dense, phylodist = cophenetic(tree_trim))
pcps_africa
pcps_africa$vectors
threshold <- 3
max.nclust <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
max.nclust <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
nperm = 100
method = "kmeans"
stat = "BIC"
criterion = "diffNgroup"
subset = 100
confidence.level = c(0.7, 0.8, 0.9, 0.95, 0.99)
if(dim(x) > 1000){
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
} else{
subset <- dim(x)[1]
}
x <- pcps_africa$vectors
threshold <- 3
max.nclust <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
nperm = 100
method = "kmeans"
stat = "BIC"
criterion = "diffNgroup"
subset = 100
confidence.level = c(0.7, 0.8, 0.9, 0.95, 0.99)
if(dim(x) > 1000){
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
} else{
subset <- dim(x)[1]
}
vec.perm <- 1:nperm
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
group_perm <- lapply(max.nclust, function(z){
lapply(vec.perm, function(y){
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = z)
groups <- as.matrix(clust_vec$grp)
group.subset <- as.matrix(groups[group.sample,])
group.subset
})
})
max.nclust <- c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
vec.perm <- 1:nperm
group.sample <- sample(1:nrow(x), size = subset, replace = FALSE)
group_perm <- lapply(max.nclust, function(z){
lapply(vec.perm, function(y){
clust_vec <- adegenet::find.clusters(
x = x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = "kmeans",
stat = "BIC",
n.iter = 1e7,
criterion = criterion,
max.n.clust = z)
groups <- as.matrix(clust_vec$grp)
group.subset <- as.matrix(groups[group.sample,])
group.subset
})
})
names(group_perm) <- c(paste("group.max", max.nclust, sep =""))
bin_matrix <- lapply(group_perm, function(k){
do.call(cbind, k)
})
group_affinity <- lapply(bin_matrix, function(x) lapply(apply(x, MARGIN = 2,
function(z) lapply(z, function(p) p == z)), function(k) do.call(rbind, k)))
means_corGroup <- lapply(lapply(lapply(group_affinity, function(x){
lapply(x, function(z){
as.vector(as.dist(z, diag = FALSE, upper = FALSE))
})
}), function(y){
cor_grouping <- cor(do.call(cbind, y))
diag(cor_grouping) <- NA
cor_grouping
}), function(m) rowMeans(m, na.rm = TRUE))
congruence_matrix <- matrix(unlist(lapply(means_corGroup, function(x){
lapply(confidence.level, function(y){
sum(ifelse(x >= y, 1, 0))/nperm
})
})), nrow = length(max.nclust), ncol = length(confidence.level),
dimnames = list(paste("max.n.clus",
max.nclust, sep = ""),
paste("conf.level", confidence.level, sep = "")))
congruence_matrix
threshold
x <- pcps_africa$vectors
threshold <- 3
max.nclust <- c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
nperm = 100
method = "kmeans"
stat = "BIC"
criterion = "diffNgroup"
subset = 100
confidence.level = c(0.7, 0.8, 0.9, 0.95, 0.99)
group.affinity<-matrix(NA,subset,subset)
grouping<-matrix(NA,(subset*(subset-1))/2,runs)
group.sample<-sample(1:nrow(x),size=subset,replace=FALSE)
runs=100
grouping<-matrix(NA,(subset*(subset-1))/2,runs)
group.sample<-sample(1:nrow(x),size=subset,replace=FALSE)
congruence<-matrix(NA,length(max.nclust),length(confidence.level),dimnames=list(paste("max.",max.nclust,"groups",sep=" "),paste("Confidence.level=",confidence.level,"%",sep="")))
for (m in 1:length(confidence.level)){
for (l in 1:length(max.nclust)){
for (k in 1:runs){
clust.vec<-adegenet::find.clusters(x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = method,
stat = stat,
n.iter = 1e7,
criterion = criterion,
max.n.clust = max.nclust[[l]]
)
rownames(as.data.frame(clust.vec$grp)) == rownames(esp)
groups<-as.matrix(clust.vec$grp)
group.subset<-as.matrix(groups[group.sample,])
tgroups<-as.matrix(t(group.subset))
for(j in 1:subset){
for (i in 1:subset){
group.affinity[i,j]<-group.subset[i,]==tgroups[,j]
}
}
grouping[,k]<-as.vector(as.dist(group.affinity,diag=FALSE,upper=FALSE))
}
cor.grouping<-as.matrix(cor(grouping))
diag(cor.grouping)<-NA
congruence[l,m]<-sum(ifelse(rowMeans(cor.grouping,na.rm=T)>confidence.level[[m]],1,0))/runs
}
}
for (m in 1:length(confidence.level)){
for (l in 1:length(max.nclust)){
for (k in 1:runs){
clust.vec<-adegenet::find.clusters(x[, 1:threshold],
clust = NULL,
choose.n.clust = FALSE,
n.pca = threshold,
method = method,
stat = stat,
n.iter = 1e7,
criterion = criterion,
max.n.clust = max.nclust[[l]]
)
rownames(as.data.frame(clust.vec$grp)) == rownames(x)
groups<-as.matrix(clust.vec$grp)
group.subset<-as.matrix(groups[group.sample,])
tgroups<-as.matrix(t(group.subset))
for(j in 1:subset){
for (i in 1:subset){
group.affinity[i,j]<-group.subset[i,]==tgroups[,j]
}
}
grouping[,k]<-as.vector(as.dist(group.affinity,diag=FALSE,upper=FALSE))
}
cor.grouping<-as.matrix(cor(grouping))
diag(cor.grouping)<-NA
congruence[l,m]<-sum(ifelse(rowMeans(cor.grouping,na.rm=T)>confidence.level[[m]],1,0))/runs
}
}
congruence
which.max(congruence_matrix)
which(congruence_matrix == max(congruence_matrix), arr.ind = TRUE)
max(congruence_matrix)
which(congruence_matrix => 0.95, arr.ind = TRUE)
which(congruence_matrix >= 0.95, arr.ind = TRUE)
length(confidence.level)
which(congruence_matrix[, length(confidence.level)] >= 0.95 , arr.ind = TRUE)
congruence_matrix[, length(confidence.level)]
which(congruence_matrix[, length(confidence.level)] >= 0.95)
congruence_matrix
match_clust <- pmatch(max.n.clust.method, "elbow")
match_clust
library(phyloregion)
data(africa)
library(phyloregion)
data(africa)
pb <- phyloregion::phylobeta(x = africa$comm, phy = africa$phylo)
intersect(x = colnames(africa$phylo), africa$phylo$tip.label)
colnames(africa$comm)
intersect(x = colnames(africa$comm), africa$phylo$tip.label)
tree <- ape::keep.tip(phy = africa$phylo,
tip = intersect(x = colnames(africa$comm), africa$phylo$tip.label))
pb <- phyloregion::phylobeta(x = africa$comm, phy = tree)
pb
phylo_class <- phyloregion::phyloregion(x = pb$phylo.beta.sim, k = 10, method = "average")
phylo_class
install.packages("devtools")
devtools::install_packages("GabrielNakamura/Rrodotus")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
devtools::install_packages("GabrielNakamura/Rrodotus")
devtools::install_github("GabrielNakamura/Rrodotus")
library(Rrodotus)
optimal
tree <- africa$phylo
tree <- ape::keep.tip(tree, intersect(tree$tip.label, colnames(sparse_comm)))
sparse_comm <- africa$comm
tree <- africa$phylo
tree <- africa$phylo
tree <- ape::keep.tip(tree, intersect(tree$tip.label, colnames(sparse_comm)))
pb <- phylobeta(sparse_comm, tree)
library(phyloregion)
pb <- phyloregion::phylobeta(sparse_comm, tree)
install.packages("phyloregion")
pb <- phyloregion::phylobeta(sparse_comm, tree)
library(phyloregion)
install.packages("terra")
library(phyloregion)
pb <- phyloregion::phylobeta(sparse_comm, tree)
install.packages("~/Downloads/terra_1.5-17.tar.gz", repos = NULL, type = "source")
remove.packages("terra")
install.packages("~/Downloads/terra_1.5-17.tar.gz", repos = NULL, type = "source")
install.packages("terra")
install.packages("terra")
install.packages("terra")
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
library(Rrodotus)
library(phyloregion)
data(africa)
sparse_comm <- africa$comm
africa$polys
tree <- africa$phylo
tree <- ape::keep.tip(tree, intersect(tree$tip.label, colnames(sparse_comm)))
pb <- phylobeta(sparse_comm, tree)
optimal <- optimal_phyloregion(x = pb$phylo.beta.sim, method = "average", k = 20)
phylo_regionalization <- phyloregion(x = pb$phylo.beta.sim, k = optimal$optimal$k, method = "average")
names(phylo_regionalization$region.dist)
comm_dense <- phyloregion::sparse2dense(sparse_comm)
matrix_p_nigeria <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree))
beta_fuzzy_bray <- sqrt(vegan::vegdist(matrix_p_nigeria$matrix.P, method = "bray"))
optimal_fuzzy <- phyloregion::optimal_phyloregion(x = beta_fuzzy_bray, method = "average", k = 20)
phylo_regionalization_fuzzy <- phyloregion::phyloregion(x = beta_fuzzy_bray,
k = optimal_fuzzy$optimal$k,
method = "average")
phylo_evoregion <- Rrodotus::evoregions(comm = comm_dense, phy = phytools::force.ultrametric(tree), max.n.clust = NULL,
max.n.clust.method = "elbow",
method.dist = "bray",
tresh.dist = 0.05,
method.clust = "kmeans",
stat.clust = "BIC",
n.iter.clust = 1e7,
criterion.clust = "diffNgroup")
library(devtools)
library(usethis)
devtools::document()
devtools::check()
devtools::check()
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
library(Rrodotus)
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
devtools::install_github("GabrielNakamura/Rrodotus")
devtools::install_github("GabrielNakamura/Rrodotus", force = TRUE)
help(package = "Rrodotus")
library(Rrodotus)
library(phyloregion)
data(africa)
sparse_comm <- africa$comm
tree <- africa$phylo
tree <- ape::keep.tip(tree, intersect(tree$tip.label, colnames(sparse_comm)))
pb <- phylobeta(sparse_comm, tree)
optimal <- optimal_phyloregion(x = pb$phylo.beta.sim, method = "average", k = 20)
phylo_regionalization <- phyloregion(x = pb$phylo.beta.sim, k = optimal$optimal$k, method = "average")
comm_dense <- phyloregion::sparse2dense(sparse_comm)
matrix_p_nigeria <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree))
beta_fuzzy_bray <- sqrt(vegan::vegdist(matrix_p_nigeria$matrix.P, method = "bray"))
optimal_fuzzy <- phyloregion::optimal_phyloregion(x = beta_fuzzy_bray, method = "average", k = 20)
phylo_regionalization_fuzzy <- phyloregion::phyloregion(x = beta_fuzzy_bray,
k = optimal_fuzzy$optimal$k,
method = "average")
phylo_evoregion <- Rrodotus::evoregions(comm = comm_dense, phy = phytools::force.ultrametric(tree), max.n.clust = NULL,
max.n.clust.method = "elbow",
method.dist = "bray",
tresh.dist = 0.05,
method.clust = "kmeans",
stat.clust = "BIC",
n.iter.clust = 1e7,
criterion.clust = "diffNgroup")
?evoregions
phylo_evoregion <- evoregions(comm = comm_dense, phy = phytools::force.ultrametric(tree), max.n.clust = NULL,
max.n.clust.method = "elbow",
method.dist = "bray",
tresh.dist = 0.05,
method.clust = "kmeans",
stat.clust = "BIC",
n.iter.clust = 1e7,
criterion.clust = "diffNgroup")
?gls()
library(nlme)
?gls
library(geiger)
sim.bdtree(b = 1, t = 10)
sim.bdtree(b = 1, taxa = 10)
tree_sim <- sim.bdtree(b = 1, n = 10)
tree_sim
t1 <- rnorm(10)
t2 <- rnorm(10)
gls(t1 ~ t2, correlation = corBrownian(tree_sim))
tree_sim
class(tree_sim)
corBrownian(tree_sim)
?corBrownian
gls(t1 ~ t2, correlation = corBrownian(phy = tree_sim))
library(Rrodotus)
library(phyloregion)
data(africa)
sparse_comm <- africa$comm
tree <- africa$phylo
tree <- ape::keep.tip(tree, intersect(tree$tip.label, colnames(sparse_comm)))
pb <- phylobeta(sparse_comm, tree)
optimal <- optimal_phyloregion(x = pb$phylo.beta.sim, method = "average", k = 20)
phylo_regionalization <- phyloregion(x = pb$phylo.beta.sim, k = optimal$optimal$k, method = "average")
comm_dense <- phyloregion::sparse2dense(sparse_comm)
matrix_p_nigeria <- SYNCSA::matrix.p(comm = comm_dense, phylodist = cophenetic(tree))
beta_fuzzy_bray <- sqrt(vegan::vegdist(matrix_p_nigeria$matrix.P, method = "bray"))
optimal_fuzzy <- phyloregion::optimal_phyloregion(x = beta_fuzzy_bray, method = "average", k = 20)
phylo_regionalization_fuzzy <- phyloregion::phyloregion(x = beta_fuzzy_bray,
k = optimal_fuzzy$optimal$k,
method = "average")
phylo_evoregion <- evoregions(comm = comm_dense, phy = phytools::force.ultrametric(tree), max.n.clust = NULL,
max.n.clust.method = "elbow",
method.dist = "bray",
tresh.dist = 0.05,
method.clust = "kmeans",
stat.clust = "BIC",
n.iter.clust = 1e7,
criterion.clust = "diffNgroup")
help(package = "Rrodotus")
